#include <random>
#include <iostream>
#include <math.h>
#include <algorithm>
#define _USE_MATH_DEFINES
int main()
{
    double res = 0;
    double aa = 0.2;
    double i = 0;
    double n = 3;
    long j;
    std::vector <double> arr = {};
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0.0, 2*M_PI);
for (j = 0; j < 1e9; ++j){
    arr = {};
    for (int k = 0; k < n; ++k) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [0, 2PI). Each call to dis(gen) generates a new random double
        arr.push_back(dis(gen));
    }
    std::sort(arr.begin(), arr.end());
    res = (arr[0]) + (2*M_PI - arr[arr.size()-1]);
    for (int k = 1; k < n; ++k)
    {
        if (arr[k] - arr[k-1] < res)
            {
                res = (arr[k] - arr[k-1]);
            }
    }


    if(res < aa)
    {
        ++i;
    }
}



    std::cout << '\n';
    std::cout << "Rezultatul: " << i/j << std::endl;
    std::cout << "Rezultatul exact: " << n*(pow(aa,n-1)) << std::endl;
    std::cout << "__________________" << std::endl;
    std::cout << n << " " << res;
}
